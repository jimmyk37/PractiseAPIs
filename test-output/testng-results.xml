<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="13" total="50" passed="35" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-11-05T11:10:07 IST" name="All" finished-at="2024-11-05T11:10:55 IST" duration-ms="48000">
    <groups>
    </groups>
    <test started-at="2024-11-05T11:10:07 IST" name="Test" finished-at="2024-11-05T11:10:55 IST" duration-ms="48000">
      <class name="sample.Product.BrandsList">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:21 IST" name="setUp" finished-at="2024-11-05T11:10:21 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=BrandsList.testGetAllBrandsListSuccess()[pri:0, instance:sample.Product.BrandsList@5a12c728] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetAllBrandsListSuccess()[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:21 IST" name="testGetAllBrandsListSuccess" finished-at="2024-11-05T11:10:23 IST" duration-ms="1545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllBrandsListSuccess -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:23 IST" name="tearDown" finished-at="2024-11-05T11:10:23 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetAllBrandsListSuccess status=SUCCESS method=BrandsList.testGetAllBrandsListSuccess()[pri:0, instance:sample.Product.BrandsList@5a12c728] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:23 IST" name="setUp" finished-at="2024-11-05T11:10:23 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=BrandsList.testInvalidEndpoint()[pri:0, instance:sample.Product.BrandsList@5a12c728] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidEndpoint()[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:23 IST" name="testInvalidEndpoint" finished-at="2024-11-05T11:10:24 IST" duration-ms="1197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidEndpoint -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:24 IST" name="tearDown" finished-at="2024-11-05T11:10:24 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidEndpoint status=SUCCESS method=BrandsList.testInvalidEndpoint()[pri:0, instance:sample.Product.BrandsList@5a12c728] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:24 IST" name="setUp" finished-at="2024-11-05T11:10:24 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=BrandsList.testUnsupportedMethod()[pri:0, instance:sample.Product.BrandsList@5a12c728] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUnsupportedMethod()[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:24 IST" name="testUnsupportedMethod" finished-at="2024-11-05T11:10:25 IST" duration-ms="1258" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnsupportedMethod -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.BrandsList@5a12c728]" started-at="2024-11-05T11:10:25 IST" name="tearDown" finished-at="2024-11-05T11:10:25 IST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUnsupportedMethod status=SUCCESS method=BrandsList.testUnsupportedMethod()[pri:0, instance:sample.Product.BrandsList@5a12c728] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.Product.BrandsList -->
      <class name="sample.User.CreateAccountTest">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:17 IST" name="setUp" finished-at="2024-11-05T11:10:17 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testCreateAccountSuccess()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCreateAccountSuccess()[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:17 IST" name="testCreateAccountSuccess" finished-at="2024-11-05T11:10:18 IST" duration-ms="697" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <201> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <201> but was <200>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:57)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:143)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at sample.User.CreateAccountTest.testCreateAccountSuccess(CreateAccountTest.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateAccountSuccess -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:18 IST" name="tearDown" finished-at="2024-11-05T11:10:18 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCreateAccountSuccess status=FAILURE method=CreateAccountTest.testCreateAccountSuccess()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:18 IST" name="setUp" finished-at="2024-11-05T11:10:18 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testExistingEmail()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testExistingEmail()[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:18 IST" name="testExistingEmail" finished-at="2024-11-05T11:10:19 IST" duration-ms="1393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExistingEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:19 IST" name="tearDown" finished-at="2024-11-05T11:10:19 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testExistingEmail status=SUCCESS method=CreateAccountTest.testExistingEmail()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:19 IST" name="setUp" finished-at="2024-11-05T11:10:19 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testInvalidEmailFormat()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidEmailFormat()[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:19 IST" name="testInvalidEmailFormat" finished-at="2024-11-05T11:10:20 IST" duration-ms="1221" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Invalid EMail] but found [Email already exists!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Invalid EMail] but found [Email already exists!]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1577)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:655)
at org.testng.Assert.assertEquals(Assert.java:665)
at sample.User.CreateAccountTest.testInvalidEmailFormat(CreateAccountTest.java:111)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidEmailFormat -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:20 IST" name="tearDown" finished-at="2024-11-05T11:10:20 IST" duration-ms="30" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidEmailFormat status=FAILURE method=CreateAccountTest.testInvalidEmailFormat()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:20 IST" name="setUp" finished-at="2024-11-05T11:10:20 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testMissingRequiredFields()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testMissingRequiredFields()[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:20 IST" name="testMissingRequiredFields" finished-at="2024-11-05T11:10:21 IST" duration-ms="1172" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingRequiredFields -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.CreateAccountTest@772485dd]" started-at="2024-11-05T11:10:21 IST" name="tearDown" finished-at="2024-11-05T11:10:21 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingRequiredFields status=SUCCESS method=CreateAccountTest.testMissingRequiredFields()[pri:0, instance:sample.User.CreateAccountTest@772485dd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.User.CreateAccountTest -->
      <class name="sample.User.DeleteAccountTest">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:35 IST" name="setUp" finished-at="2024-11-05T11:10:35 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DeleteAccountTest.testIncorrectPassword()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncorrectPassword()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:35 IST" name="testIncorrectPassword" finished-at="2024-11-05T11:10:37 IST" duration-ms="1716" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncorrectPassword -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:37 IST" name="tearDown" finished-at="2024-11-05T11:10:37 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testIncorrectPassword status=SUCCESS method=DeleteAccountTest.testIncorrectPassword()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:37 IST" name="setUp" finished-at="2024-11-05T11:10:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DeleteAccountTest.testInvalidEmailFormat()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidEmailFormat()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:37 IST" name="testInvalidEmailFormat" finished-at="2024-11-05T11:10:38 IST" duration-ms="1104" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidEmailFormat -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:38 IST" name="tearDown" finished-at="2024-11-05T11:10:38 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidEmailFormat status=SUCCESS method=DeleteAccountTest.testInvalidEmailFormat()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:38 IST" name="setUp" finished-at="2024-11-05T11:10:38 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DeleteAccountTest.testMissingEmailParameter()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testMissingEmailParameter()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:38 IST" name="testMissingEmailParameter" finished-at="2024-11-05T11:10:39 IST" duration-ms="667" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingEmailParameter -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:39 IST" name="tearDown" finished-at="2024-11-05T11:10:39 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingEmailParameter status=SUCCESS method=DeleteAccountTest.testMissingEmailParameter()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:39 IST" name="setUp" finished-at="2024-11-05T11:10:39 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DeleteAccountTest.testMissingPasswordParameter()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testMissingPasswordParameter()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:39 IST" name="testMissingPasswordParameter" finished-at="2024-11-05T11:10:40 IST" duration-ms="1219" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingPasswordParameter -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:40 IST" name="tearDown" finished-at="2024-11-05T11:10:40 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingPasswordParameter status=SUCCESS method=DeleteAccountTest.testMissingPasswordParameter()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:40 IST" name="setUp" finished-at="2024-11-05T11:10:40 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=DeleteAccountTest.testNonexistentEmail()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNonexistentEmail()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:40 IST" name="testNonexistentEmail" finished-at="2024-11-05T11:10:41 IST" duration-ms="1272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonexistentEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc]" started-at="2024-11-05T11:10:41 IST" name="tearDown" finished-at="2024-11-05T11:10:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNonexistentEmail status=SUCCESS method=DeleteAccountTest.testNonexistentEmail()[pri:0, instance:sample.User.DeleteAccountTest@6e5bfdfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.User.DeleteAccountTest -->
      <class name="sample.User.VerifyLoginTest">
        <test-method is-config="true" signature="setUpSuite()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:07 IST" name="setUpSuite" finished-at="2024-11-05T11:10:07 IST" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpSuite -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:07 IST" name="setUp" finished-at="2024-11-05T11:10:07 IST" duration-ms="39" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=VerifyLoginTest.testEmptyRequest()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEmptyRequest()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:07 IST" name="testEmptyRequest" finished-at="2024-11-05T11:10:12 IST" duration-ms="4732" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyRequest -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:12 IST" name="tearDown" finished-at="2024-11-05T11:10:12 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testEmptyRequest status=SUCCESS method=VerifyLoginTest.testEmptyRequest()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:12 IST" name="setUp" finished-at="2024-11-05T11:10:12 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=VerifyLoginTest.testIncorrectPassword()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncorrectPassword()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:12 IST" name="testIncorrectPassword" finished-at="2024-11-05T11:10:13 IST" duration-ms="1296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncorrectPassword -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:13 IST" name="tearDown" finished-at="2024-11-05T11:10:13 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testIncorrectPassword status=SUCCESS method=VerifyLoginTest.testIncorrectPassword()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:13 IST" name="setUp" finished-at="2024-11-05T11:10:13 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=VerifyLoginTest.testMissingEmail()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testMissingEmail()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:13 IST" name="testMissingEmail" finished-at="2024-11-05T11:10:14 IST" duration-ms="1262" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:14 IST" name="tearDown" finished-at="2024-11-05T11:10:14 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingEmail status=SUCCESS method=VerifyLoginTest.testMissingEmail()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:14 IST" name="setUp" finished-at="2024-11-05T11:10:14 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=VerifyLoginTest.testNonexistentUser()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNonexistentUser()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:14 IST" name="testNonexistentUser" finished-at="2024-11-05T11:10:16 IST" duration-ms="1351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonexistentUser -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:16 IST" name="tearDown" finished-at="2024-11-05T11:10:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNonexistentUser status=SUCCESS method=VerifyLoginTest.testNonexistentUser()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:16 IST" name="setUp" finished-at="2024-11-05T11:10:16 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=VerifyLoginTest.testVerifyLoginSuccess()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyLoginSuccess()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:16 IST" name="testVerifyLoginSuccess" finished-at="2024-11-05T11:10:17 IST" duration-ms="1261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyLoginSuccess -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:17 IST" name="tearDown" finished-at="2024-11-05T11:10:17 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testVerifyLoginSuccess status=SUCCESS method=VerifyLoginTest.testVerifyLoginSuccess()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="tearDownSuite()[pri:0, instance:sample.User.VerifyLoginTest@5aa360ea]" started-at="2024-11-05T11:10:55 IST" name="tearDownSuite" finished-at="2024-11-05T11:10:55 IST" duration-ms="508" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownSuite -->
      </class> <!-- sample.User.VerifyLoginTest -->
      <class name="sample.Product.SearchProductTest">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:25 IST" name="setUp" finished-at="2024-11-05T11:10:25 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testContentType()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testContentType()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:25 IST" name="testContentType" finished-at="2024-11-05T11:10:26 IST" duration-ms="700" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testContentType -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:26 IST" name="tearDown" finished-at="2024-11-05T11:10:26 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testContentType status=SUCCESS method=SearchProductTest.testContentType()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:26 IST" name="setUp" finished-at="2024-11-05T11:10:26 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testInvalidProductName()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidProductName()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:26 IST" name="testInvalidProductName" finished-at="2024-11-05T11:10:27 IST" duration-ms="725" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidProductName -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:27 IST" name="tearDown" finished-at="2024-11-05T11:10:27 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidProductName status=SUCCESS method=SearchProductTest.testInvalidProductName()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:27 IST" name="setUp" finished-at="2024-11-05T11:10:27 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testMissingRequiredParameter()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testMissingRequiredParameter()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:27 IST" name="testMissingRequiredParameter" finished-at="2024-11-05T11:10:28 IST" duration-ms="1226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingRequiredParameter -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:28 IST" name="tearDown" finished-at="2024-11-05T11:10:28 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingRequiredParameter status=SUCCESS method=SearchProductTest.testMissingRequiredParameter()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:28 IST" name="setUp" finished-at="2024-11-05T11:10:28 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testProductStructure()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testProductStructure()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:28 IST" name="testProductStructure" finished-at="2024-11-05T11:10:29 IST" duration-ms="891" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProductStructure -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:29 IST" name="tearDown" finished-at="2024-11-05T11:10:29 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProductStructure status=SUCCESS method=SearchProductTest.testProductStructure()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:29 IST" name="setUp" finished-at="2024-11-05T11:10:29 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testResponseTime()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testResponseTime()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:29 IST" name="testResponseTime" finished-at="2024-11-05T11:10:30 IST" duration-ms="815" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseTime -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:30 IST" name="tearDown" finished-at="2024-11-05T11:10:30 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testResponseTime status=SUCCESS method=SearchProductTest.testResponseTime()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:30 IST" name="setUp" finished-at="2024-11-05T11:10:30 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testSearchProductSuccess()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSearchProductSuccess()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:30 IST" name="testSearchProductSuccess" finished-at="2024-11-05T11:10:31 IST" duration-ms="1441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchProductSuccess -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:31 IST" name="tearDown" finished-at="2024-11-05T11:10:31 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSearchProductSuccess status=SUCCESS method=SearchProductTest.testSearchProductSuccess()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:31 IST" name="setUp" finished-at="2024-11-05T11:10:31 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testSpecialCharactersInProductName()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSpecialCharactersInProductName()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:31 IST" name="testSpecialCharactersInProductName" finished-at="2024-11-05T11:10:32 IST" duration-ms="1123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpecialCharactersInProductName -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:32 IST" name="tearDown" finished-at="2024-11-05T11:10:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSpecialCharactersInProductName status=SUCCESS method=SearchProductTest.testSpecialCharactersInProductName()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:32 IST" name="setUp" finished-at="2024-11-05T11:10:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testSpecificProductDetails()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSpecificProductDetails()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:32 IST" name="testSpecificProductDetails" finished-at="2024-11-05T11:10:34 IST" duration-ms="1370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpecificProductDetails -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:34 IST" name="tearDown" finished-at="2024-11-05T11:10:34 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSpecificProductDetails status=SUCCESS method=SearchProductTest.testSpecificProductDetails()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:34 IST" name="setUp" finished-at="2024-11-05T11:10:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=SearchProductTest.testUnsupportedMethod()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUnsupportedMethod()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:34 IST" name="testUnsupportedMethod" finished-at="2024-11-05T11:10:35 IST" duration-ms="1196" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnsupportedMethod -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.SearchProductTest@79ab3a71]" started-at="2024-11-05T11:10:35 IST" name="tearDown" finished-at="2024-11-05T11:10:35 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUnsupportedMethod status=SUCCESS method=SearchProductTest.testUnsupportedMethod()[pri:0, instance:sample.Product.SearchProductTest@79ab3a71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.Product.SearchProductTest -->
      <class name="sample.User.GetUserDetailByEmailTest">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:41 IST" name="setUp" finished-at="2024-11-05T11:10:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=GetUserDetailByEmailTest.testInvalidEmailFormat()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidEmailFormat()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:41 IST" name="testInvalidEmailFormat" finished-at="2024-11-05T11:10:42 IST" duration-ms="1175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidEmailFormat -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:42 IST" name="tearDown" finished-at="2024-11-05T11:10:42 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidEmailFormat status=SUCCESS method=GetUserDetailByEmailTest.testInvalidEmailFormat()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:42 IST" name="setUp" finished-at="2024-11-05T11:10:42 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=GetUserDetailByEmailTest.testMissingEmailParameter()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testMissingEmailParameter()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:42 IST" name="testMissingEmailParameter" finished-at="2024-11-05T11:10:43 IST" duration-ms="1207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingEmailParameter -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:43 IST" name="tearDown" finished-at="2024-11-05T11:10:43 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingEmailParameter status=SUCCESS method=GetUserDetailByEmailTest.testMissingEmailParameter()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:43 IST" name="setUp" finished-at="2024-11-05T11:10:43 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=GetUserDetailByEmailTest.testNonexistentEmail()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNonexistentEmail()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:43 IST" name="testNonexistentEmail" finished-at="2024-11-05T11:10:45 IST" duration-ms="1107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonexistentEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877]" started-at="2024-11-05T11:10:45 IST" name="tearDown" finished-at="2024-11-05T11:10:45 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNonexistentEmail status=SUCCESS method=GetUserDetailByEmailTest.testNonexistentEmail()[pri:0, instance:sample.User.GetUserDetailByEmailTest@51bde877] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.User.GetUserDetailByEmailTest -->
      <class name="sample.Product.ProductsListTest">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:45 IST" name="setUp" finished-at="2024-11-05T11:10:45 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testContentType()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testContentType()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:45 IST" name="testContentType" finished-at="2024-11-05T11:10:46 IST" duration-ms="1272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testContentType -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:46 IST" name="tearDown" finished-at="2024-11-05T11:10:46 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testContentType status=SUCCESS method=ProductsListTest.testContentType()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:46 IST" name="setUp" finished-at="2024-11-05T11:10:46 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testFilterByCategory()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testFilterByCategory()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:46 IST" name="testFilterByCategory" finished-at="2024-11-05T11:10:47 IST" duration-ms="1261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFilterByCategory -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:47 IST" name="tearDown" finished-at="2024-11-05T11:10:47 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testFilterByCategory status=SUCCESS method=ProductsListTest.testFilterByCategory()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:47 IST" name="setUp" finished-at="2024-11-05T11:10:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testGetAllProductsListSuccess()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testGetAllProductsListSuccess()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:47 IST" name="testGetAllProductsListSuccess" finished-at="2024-11-05T11:10:48 IST" duration-ms="1168" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllProductsListSuccess -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:48 IST" name="tearDown" finished-at="2024-11-05T11:10:48 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetAllProductsListSuccess status=SUCCESS method=ProductsListTest.testGetAllProductsListSuccess()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:48 IST" name="setUp" finished-at="2024-11-05T11:10:48 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testProductStructure()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testProductStructure()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:48 IST" name="testProductStructure" finished-at="2024-11-05T11:10:49 IST" duration-ms="807" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProductStructure -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:49 IST" name="tearDown" finished-at="2024-11-05T11:10:49 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProductStructure status=SUCCESS method=ProductsListTest.testProductStructure()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:49 IST" name="setUp" finished-at="2024-11-05T11:10:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testResponseContainsProducts()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testResponseContainsProducts()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:49 IST" name="testResponseContainsProducts" finished-at="2024-11-05T11:10:50 IST" duration-ms="1238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseContainsProducts -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:50 IST" name="tearDown" finished-at="2024-11-05T11:10:50 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testResponseContainsProducts status=SUCCESS method=ProductsListTest.testResponseContainsProducts()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:50 IST" name="setUp" finished-at="2024-11-05T11:10:50 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testResponseTime()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testResponseTime()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:50 IST" name="testResponseTime" finished-at="2024-11-05T11:10:53 IST" duration-ms="2367" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseTime -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:53 IST" name="tearDown" finished-at="2024-11-05T11:10:53 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testResponseTime status=SUCCESS method=ProductsListTest.testResponseTime()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:53 IST" name="setUp" finished-at="2024-11-05T11:10:53 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testSpecificProductDetails()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSpecificProductDetails()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:53 IST" name="testSpecificProductDetails" finished-at="2024-11-05T11:10:54 IST" duration-ms="1289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpecificProductDetails -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:54 IST" name="tearDown" finished-at="2024-11-05T11:10:54 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSpecificProductDetails status=SUCCESS method=ProductsListTest.testSpecificProductDetails()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:54 IST" name="setUp" finished-at="2024-11-05T11:10:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ProductsListTest.testUnsupportedMethod()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUnsupportedMethod()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:54 IST" name="testUnsupportedMethod" finished-at="2024-11-05T11:10:55 IST" duration-ms="629" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnsupportedMethod -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:sample.Product.ProductsListTest@60b85ba1]" started-at="2024-11-05T11:10:55 IST" name="tearDown" finished-at="2024-11-05T11:10:55 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUnsupportedMethod status=SUCCESS method=ProductsListTest.testUnsupportedMethod()[pri:0, instance:sample.Product.ProductsListTest@60b85ba1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.Product.ProductsListTest -->
    </test> <!-- Test -->
  </suite> <!-- All -->
</testng-results>
